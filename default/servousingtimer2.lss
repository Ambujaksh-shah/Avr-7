
servousingtimer2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000003f  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001b6  00000000  00000000  000001c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e8  00000000  00000000  00000379  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000235  00000000  00000000  00000461  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000698  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000de  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000088  00000000  00000000  000007c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  0000084e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 57 00 	call	0xae	; 0xae <main>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <T0Delay>:
 
 }
 }
 void T0Delay()//FOR 1500 MICRO SECOND
 {
  TCNT2=-65;
  6c:	8f eb       	ldi	r24, 0xBF	; 191
  6e:	84 bd       	out	0x24, r24	; 36
  TCCR2=0x04;
  70:	84 e0       	ldi	r24, 0x04	; 4
  72:	85 bd       	out	0x25, r24	; 37
  while((TIFR&0x1)==0);
  74:	08 b6       	in	r0, 0x38	; 56
  76:	00 fe       	sbrs	r0, 0
  78:	fd cf       	rjmp	.-6      	; 0x74 <T0Delay+0x8>
   TCCR2=0;
  7a:	15 bc       	out	0x25, r1	; 37
   TIFR=0x1;
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	88 bf       	out	0x38, r24	; 56
   }
  80:	08 95       	ret

00000082 <T1Delay>:
void T1Delay()//FOR 8 MICRO SECOND
 {
  TCNT2=-88;
  82:	88 ea       	ldi	r24, 0xA8	; 168
  84:	84 bd       	out	0x24, r24	; 36
  TCCR2=0x49;
  86:	89 e4       	ldi	r24, 0x49	; 73
  88:	85 bd       	out	0x25, r24	; 37
  while((TIFR&0x1)==0);
  8a:	08 b6       	in	r0, 0x38	; 56
  8c:	00 fe       	sbrs	r0, 0
  8e:	fd cf       	rjmp	.-6      	; 0x8a <T1Delay+0x8>
   TCCR2=0;
  90:	15 bc       	out	0x25, r1	; 37
   TIFR=0x1;
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	88 bf       	out	0x38, r24	; 56
   }
  96:	08 95       	ret

00000098 <T2Delay>:
void T2Delay()//FOR 1900 MICRO SECOND
 {
  TCNT2=-83;
  98:	8d ea       	ldi	r24, 0xAD	; 173
  9a:	84 bd       	out	0x24, r24	; 36
  TCCR2=0x4C;
  9c:	8c e4       	ldi	r24, 0x4C	; 76
  9e:	85 bd       	out	0x25, r24	; 37
  while((TIFR&0x1)==0);
  a0:	08 b6       	in	r0, 0x38	; 56
  a2:	00 fe       	sbrs	r0, 0
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <T2Delay+0x8>
   TCCR2=0;
  a6:	15 bc       	out	0x25, r1	; 37
   TIFR=0x1;
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	88 bf       	out	0x38, r24	; 56
   }
  ac:	08 95       	ret

000000ae <main>:
#include<util/delay.h>
void T0Delay();
void T1Delay();
void T2Delay();
void main()
{
  ae:	ef 92       	push	r14
  b0:	ff 92       	push	r15
  b2:	1f 93       	push	r17
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
 DDRB = 0xFF;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	87 bb       	out	0x17, r24	; 23
 while(1)
 {
  PORTB^=0x01;
  bc:	11 e0       	ldi	r17, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  be:	c4 e1       	ldi	r28, 0x14	; 20
  c0:	d1 e0       	ldi	r29, 0x01	; 1
  c2:	8c ec       	ldi	r24, 0xCC	; 204
  c4:	e8 2e       	mov	r14, r24
  c6:	8a e0       	ldi	r24, 0x0A	; 10
  c8:	f8 2e       	mov	r15, r24
  ca:	88 b3       	in	r24, 0x18	; 24
  cc:	81 27       	eor	r24, r17
  ce:	88 bb       	out	0x18, r24	; 24
 T0Delay();
  d0:	0e 94 36 00 	call	0x6c	; 0x6c <T0Delay>
  d4:	80 e1       	ldi	r24, 0x10	; 16
  d6:	97 e2       	ldi	r25, 0x27	; 39
  d8:	fe 01       	movw	r30, r28
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x2c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e0:	d9 f7       	brne	.-10     	; 0xd8 <main+0x2a>
 _delay_ms(1000);

PORTB^=0x01;
  e2:	88 b3       	in	r24, 0x18	; 24
  e4:	81 27       	eor	r24, r17
  e6:	88 bb       	out	0x18, r24	; 24
 T1Delay();
  e8:	0e 94 41 00 	call	0x82	; 0x82 <T1Delay>
  ec:	80 e1       	ldi	r24, 0x10	; 16
  ee:	97 e2       	ldi	r25, 0x27	; 39
  f0:	fe 01       	movw	r30, r28
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f8:	d9 f7       	brne	.-10     	; 0xf0 <main+0x42>
_delay_ms(1000);

 PORTB^=0x01;
  fa:	88 b3       	in	r24, 0x18	; 24
  fc:	81 27       	eor	r24, r17
  fe:	88 bb       	out	0x18, r24	; 24
 T2Delay();
 100:	0e 94 4c 00 	call	0x98	; 0x98 <T2Delay>
 104:	c7 01       	movw	r24, r14
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x58>
 10a:	df cf       	rjmp	.-66     	; 0xca <main+0x1c>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
